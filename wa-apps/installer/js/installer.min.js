(function(a){var r=a.fn.domManip,d="_tmplitem",q=/^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /,b={},f={},e,p={key:0,data:{}},h=0,c=0,l=[];function g(e,d,g,i){var c={data:i||(d?d.data:{}),_wrap:d?d._wrap:null,tmpl:null,parent:d||null,nodes:[],calls:u,nest:w,wrap:x,html:v,update:t};e&&a.extend(c,e,{nodes:[],parent:d});if(g){c.tmpl=g;c._ctnt=c._ctnt||c.tmpl(a,c);c.key=++h;(l.length?f:b)[h]=c}return c}a.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(f,d){a.fn[f]=function(n){var g=[],i=a(n),k,h,m,l,j=this.length===1&&this[0].parentNode;e=b||{};if(j&&j.nodeType===11&&j.childNodes.length===1&&i.length===1){i[d](this[0]);g=this}else{for(h=0,m=i.length;h<m;h++){c=h;k=(h>0?this.clone(true):this).get();a.fn[d].apply(a(i[h]),k);g=g.concat(k)}c=0;g=this.pushStack(g,f,i.selector)}l=e;e=null;a.tmpl.complete(l);return g}});a.fn.extend({tmpl:function(d,c,b){return a.tmpl(this[0],d,c,b)},tmplItem:function(){return a.tmplItem(this[0])},template:function(b){return a.template(b,this[0])},domManip:function(d,l,j){if(d[0]&&d[0].nodeType){var f=a.makeArray(arguments),g=d.length,i=0,h;while(i<g&&!(h=a.data(d[i++],"tmplItem")));if(g>1)f[0]=[a.makeArray(d)];if(h&&c)f[2]=function(b){a.tmpl.afterManip(this,b,j)};r.apply(this,f)}else r.apply(this,arguments);c=0;!e&&a.tmpl.complete(b);return this}});a.extend({tmpl:function(d,h,e,c){var j,k=!c;if(k){c=p;d=a.template[d]||a.template(null,d);f={}}else if(!d){d=c.tmpl;b[c.key]=c;c.nodes=[];c.wrapped&&n(c,c.wrapped);return a(i(c,null,c.tmpl(a,c)))}if(!d)return[];if(typeof h==="function")h=h.call(c||{});e&&e.wrapped&&n(e,e.wrapped);j=a.isArray(h)?a.map(h,function(a){return a?g(e,c,d,a):null}):[g(e,c,d,h)];return k?a(i(c,null,j)):j},tmplItem:function(b){var c;if(b instanceof a)b=b[0];while(b&&b.nodeType===1&&!(c=a.data(b,"tmplItem"))&&(b=b.parentNode));return c||p},template:function(c,b){if(b){if(typeof b==="string")b=o(b);else if(b instanceof a)b=b[0]||{};if(b.nodeType)b=a.data(b,"tmpl")||a.data(b,"tmpl",o(b.innerHTML));return typeof c==="string"?(a.template[c]=b):b}return c?typeof c!=="string"?a.template(null,c):a.template[c]||a.template(null,q.test(c)?c:a(c)):null},encode:function(a){return(""+a).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;")}});a.extend(a.tmpl,{tag:{tmpl:{_default:{$2:"null"},open:"if($notnull_1){_=_.concat($item.nest($1,$2));}"},wrap:{_default:{$2:"null"},open:"$item.calls(_,$1,$2);_=[];",close:"call=$item.calls();_=call._.concat($item.wrap(call,_));"},each:{_default:{$2:"$index, $value"},open:"if($notnull_1){$.each($1a,function($2){with(this){",close:"}});}"},"if":{open:"if(($notnull_1) && $1a){",close:"}"},"else":{_default:{$1:"true"},open:"}else if(($notnull_1) && $1a){"},html:{open:"if($notnull_1){_.push($1a);}"},"=":{_default:{$1:"$data"},open:"if($notnull_1){_.push($.encode($1a));}"},"!":{open:""}},complete:function(){b={}},afterManip:function(f,b,d){var e=b.nodeType===11?a.makeArray(b.childNodes):b.nodeType===1?[b]:[];d.call(f,b);m(e);c++}});function i(e,g,f){var b,c=f?a.map(f,function(a){return typeof a==="string"?e.key?a.replace(/(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g,"$1 "+d+'="'+e.key+'" $2'):a:i(a,e,a._ctnt)}):e;if(g)return c;c=c.join("");c.replace(/^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/,function(f,c,e,d){b=a(e).get();m(b);if(c)b=j(c).concat(b);if(d)b=b.concat(j(d))});return b?b:j(c)}function j(c){var b=document.createElement("div");b.innerHTML=c;return a.makeArray(b.childNodes)}function o(b){return new Function("jQuery","$item","var $=jQuery,call,_=[],$data=$item.data;with($data){_.push('"+a.trim(b).replace(/([\\'])/g,"\\$1").replace(/[\r\t\n]/g," ").replace(/\$\{([^\}]*)\}/g,"{{= $1}}").replace(/\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g,function(m,l,j,d,b,c,e){var i=a.tmpl.tag[j],h,f,g;if(!i)throw"Template command not found: "+j;h=i._default||[];if(c&&!/\w$/.test(b)){b+=c;c=""}if(b){b=k(b);e=e?","+k(e)+")":c?")":"";f=c?b.indexOf(".")>-1?b+c:"("+b+").call($item"+e:b;g=c?f:"(typeof("+b+")==='function'?("+b+").call($item):("+b+"))"}else g=f=h.$1||"null";d=k(d);return"');"+i[l?"close":"open"].split("$notnull_1").join(b?"typeof("+b+")!=='undefined' && ("+b+")!=null":"true").split("$1a").join(g).split("$1").join(f).split("$2").join(d?d.replace(/\s*([^\(]+)\s*(\((.*?)\))?/g,function(d,c,b,a){a=a?","+a+")":b?")":"";return a?"("+c+").call($item"+a:d}):h.$2||"")+"_.push('"})+"');}return _;")}function n(c,b){c._wrap=i(c,true,a.isArray(b)?b:[q.test(b)?b:a(b).html()]).join("")}function k(a){return a?a.replace(/\\'/g,"'").replace(/\\\\/g,"\\"):null}function s(b){var a=document.createElement("div");a.appendChild(b.cloneNode(true));return a.innerHTML}function m(o){var n="_"+c,k,j,l={},e,p,i;for(e=0,p=o.length;e<p;e++){if((k=o[e]).nodeType!==1)continue;j=k.getElementsByTagName("*");for(i=j.length-1;i>=0;i--)m(j[i]);m(k)}function m(j){var p,i=j,k,e,m;if(m=j.getAttribute(d)){while(i.parentNode&&(i=i.parentNode).nodeType===1&&!(p=i.getAttribute(d)));if(p!==m){i=i.parentNode?i.nodeType===11?0:i.getAttribute(d)||0:0;if(!(e=b[m])){e=f[m];e=g(e,b[i]||f[i],null,true);e.key=++h;b[h]=e}c&&o(m)}j.removeAttribute(d)}else if(c&&(e=a.data(j,"tmplItem"))){o(e.key);b[e.key]=e;i=a.data(j.parentNode,"tmplItem");i=i?i.key:0}if(e){k=e;while(k&&k.key!=i){k.nodes.push(j);k=k.parent}delete e._ctnt;delete e._wrap;a.data(j,"tmplItem",e)}function o(a){a=a+n;e=l[a]=l[a]||g(e,b[e.parent.key+n]||e.parent,null,true)}}}function u(a,d,c,b){if(!a)return l.pop();l.push({_:a,tmpl:d,item:this,data:c,options:b})}function w(d,c,b){return a.tmpl(a.template(d),c,b,this)}function x(b,d){var c=b.options||{};c.wrapped=d;return a.tmpl(a.template(b.tmpl),b.data,c,b.item)}function v(d,c){var b=this._wrap;return a.map(a(a.isArray(b)?b.join(""):b).filter(d||"*"),function(a){return c?a.innerText||a.textContent:a.outerHTML||s(a)})}function t(){var b=this.nodes;a.tmpl(null,null,null,this).insertBefore(b[0]);a(b).remove()}})(jQuery);
/**
 * @example
 * translate['Hello world'] = 'Bonjour tout le monde';
 * alert('Hello world'.translate());
 */
var translate = {};
String.prototype.translate = function () {
    return translate[this] ? translate[this] : this;
};

/**
 * @link http://habrahabr.ru/blogs/javascript/116852/
 * @link https://github.com/theshock/console-cap
 *
 */

(function () {
    var global = this;
    var original = global.console;
    var console = global.console = {};
    console.production = false;

    if (original && !original.time) {
        original.time = function (name, reset) {
            if (!name) {
                return;
            }
            var time = new Date().getTime();
            if (!console.timeCounters)
                console.timeCounters = {};

            var key = "KEY" + name.toString();
            if (!reset && console.timeCounters[key]) {
                return;
            }
            console.timeCounters[key] = time;
        };

        original.timeEnd = function (name) {
            var time = new Date().getTime();

            if (!console.timeCounters) {
                return null;
            }

            var key = "KEY" + name.toString();
            var timeCounter = console.timeCounters[key];

            if (timeCounter) {
                var diff = time - timeCounter;
                var label = name + ": " + diff + "ms";
                console.info(label);
                delete console.timeCounters[key];
            }
            return diff;
        };
    }

    var methods = ['assert', 'count', 'debug', 'dir', 'dirxml', 'error', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile',
        'profileEnd', 'table', 'time', 'timeEnd', 'trace', 'warn'];

    for (var i = methods.length; i--;) {
        (function (methodName) {
            console[methodName] = function () {
                if (original && (methodName in original) && !console.production) {
                    try {
                        original[methodName].apply(original, arguments);
                    } catch (e) {
                        alert(arguments);
                    }
                }
            };
        })(methods[i]);
    }
})();

(function ($) {
    $.installer = {
        options: {
            redirect_url: null,
            redirect_timeout: 3000, /*ms*/
            updateStateInterval: 2000, /* ms */
            updateStateErrorInterval: 6000, /* ms */
            queue: [],
            install: false,
            logMode: 'raw', /* raw|apps */
            timestamp: null,
            end: null
        },
        timeout: {
            state: null
        },
        counter: 0,
        offset: 0,
        complete: null,
        thread_id: null,

        /**
         *
         * @param {object} options
         * @param {string=} thread_id
         */
        init: function (options, thread_id) {
            this.trace('init');
            this.thread_id = thread_id || null;
            this.options = $.extend({}, this.options, options || {});
            if (this.options.timestamp) {
                var date = new Date();
                this.offset = date.getTime() / 1000 - parseInt(this.options.timestamp);
                if (Math.abs(this.offset) > 10) {
                    console.error('Invalid timestamp at response, check server time', this.offset);
                }
            }
            var self = this;

            this.helper.compileTemplates();

            if (this.options.queue.length) {
                this.execute('update', this.options.queue);
            } else {
                this.execute('state', null);
            }
            $('body').addClass('i-fixed-body');
            this.onResize();
            $(window).resize(function () {
                self.onResize();
            });
        },

        helper: {
            plural: function (n) {
                return  ((n % 10 == 1 && n % 100 != 11) ? 0 : ((n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20)) ? 1 : 2));
            },
            /**
             * prepare templates
             */
            compileTemplates: function () {
                var pattern = /<\\\/(\w+)/g;
                var replace_pattern = '<\/$1';

                $("script[type$='x-jquery-tmpl']").each(function () {
                    try {
                        var template_id = $(this).attr('id').replace(/-template-js$/, '');
                        $.installer.trace('Compile template', template_id);
                        $.template(template_id, $(this).html().replace(pattern, replace_pattern));
                    } catch (e) {
                        console.error(e);
                    }
                });
            },
            /**
             *
             * @param {string} target
             * @returns {string}
             */
            subject: function (target) {
                var matches;
                var subject = 'generic';
                if (target.match(/^wa-apps/)) {

                    if (matches = target.match(/^wa-apps\/\w+\/(\w+)/)) {
                        subject = 'app_' + matches[1];
                        /* it's extras */
                    } else {
                        subject = 'apps';
                        /* it's apps */
                    }
                } else if (target.match(/^wa-plugins/)) {
                    if (matches = target.match(/^wa-plugins\/\w+\/(\w+)/)) {
                        subject = 'systemplugins_' + matches[1];
                        /* it's extras */
                    } else {
                        subject = 'systemplugins';
                        /* it's apps */
                    }
                }
                return subject;
            },
            /**
             *
             * @param {number=500} interval
             */
            hideCounter: function (interval) {
                interval = interval || 500;
                setTimeout(function () {
                    $("#wa-app-installer span.indicator").remove();
                    $("#wa-app li span.indicator").remove();
                }, interval);
            }
        },

        onResize: function () {
            setInterval(function () {
                $('.content .i-app-update-screen').css('max-height', (parseInt($('#wa').css('height')) - 110) + 'px');
            }, 500);
        },

        execute: function (actionName, attr) {
            actionName = actionName || 'default';
            this.trace('execute action ' + actionName, attr);
            if (this[actionName + 'Action']) {
                this.currentAction = actionName;
                this.currentActionAttr = attr;
                try {
                    return this[actionName + 'Action'](attr);
                } catch (e) {
                    console.error('Exception while execute ' + actionName + 'Action', e);
                }
            } else {
                console.error('Invalid action name', actionName + 'Action');
            }
            return null;
        },

        defaultAction: function () {

        },

        stateAction: function () {
            var url = '?module=update&action=state';
            var self = this;
            try {
                this.sendRequest(url, {
                    mode: this.options.logMode
                }, function (data) {
                    self.updateStateHandler(data);
                }, function (data) {
                    self.updateStateErrorHandler(data);
                });
            } catch (e) {
                console.error('Exception while execute stateAction', e);
                this.execute('state', null);
            }
        },

        updateAction: function (apps) {
            var url = '?module=update&action=execute';
            var params = {
                thread_id: this.thread_id,
                app_id: apps,
                mode: this.options.logMode,
                install: this.options.install ? '1' : '0'
            };
            var self = this;
            this.sendRequest(url, params, function (data) {
                try {
                    self.updateExecuteHandler(data);
                } catch (e) {
                    console.error('Exception while execute updateExecuteHandler', e);
                }
            }, function (data) {
                try {
                    self.updateExecuteErrorHandler(data);
                } catch (e) {
                    console.error('Exception while execute updateExecuteErrorHandler', e);
                }
            }, function () {
                self.timeout.state = setTimeout(function () {
                    self.execute('state', null);
                }, Math.max(2000, self.options.updateStateInterval * 4));
            });
        },

        updateExecuteHandler: function (data) {
            this.trace('updateExecuteHandler', data);
            if (this.timeout.state) {
                clearTimeout(this.timeout.state);
            }
            var result = {
                success: 0,
                success_plural: 0,
                fail: 0,
                fail_plural: 0
            };
            var complete_result = {};
            var state = false;
            var subject = 'generic';
            if (!data) {
                return;
            }

            this.complete = true;
            if (data.sources) {
                for (var id in data.sources) {
                    if (data.sources.hasOwnProperty(id)) {
                        subject = this.helper.subject(data.sources[id].target);
                        if (subject != 'generic') {
                            if (!complete_result[subject]) {
                                complete_result[subject] = {
                                    success: 0,
                                    fail: 0,
                                    plural: null
                                };
                            }

                            if (data.sources[id].skipped) {
                                ++result.fail;
                                state = state || 'no';
                                ++complete_result[subject].fail;
                            } else {
                                ++result.success;
                                state = state || 'yes';
                                ++complete_result[subject].success;
                            }
                        }
                    }
                }
            }
            result.success_plural = this.helper.plural(result.success);
            result.fail_plural = this.helper.plural(result.fail);
            state = state || 'no';
            this.helper.hideCounter(100);
            var self = this;
            this.drawStateInfo(data.state, state);
            setTimeout(function () {
                $.tmpl('application-update-result', {
                    current_state: data.current_state,
                    result: result,
                    sources: data.sources
                }).appendTo('#update-raw');

                setTimeout(function () {
                    var targetOffset = $('div.i-app-update-screen :last').offset().top;
                    $('div.i-app-update-screen').scrollTop(targetOffset);
                    self.redirectOnComplete();
                    self.animateOnInstall();
                }, 500);
            }, 500);
        },

        updateExecuteErrorHandler: function (data) {
            this.trace('updateExecuteErrorHandler', data);
            /*
             * TODO handle errors and try to restart action if it possible
             */
        },

        /**
         *
         * @param {
         *      {
         *          {string}stage_status,
         *          {number}timestamp
         *      }current_state,
         *      {Array}state
         *  } data
         */
        updateStateHandler: function (data) {
            this.trace('stateHandler', data);
            if (this.timeout.state || this.complete) {
                clearTimeout(this.timeout.state);
            }
            var self = this;
            try {
                if (this.complete) {
                    this.redirectOnComplete();
                } else {
                    /* update/add stage info */
                    /* (parseInt(data.current_state.stage_elapsed_time) > 3)*/
                    var draw = false;
                    var date = new Date();
                    var interval = data.current_state ? Math.abs(this.offset - (date.getTime() / 1000 - parseInt(data.current_state.timestamp))) : null;
                    var state_is_actual = data.current_state && (interval < 15);
                    if (state_is_actual) {
                        if (data.current_state.stage_status == 'error') {
                            draw = true;
                        } else if ((data.current_state.stage_status == 'complete') && (data.current_state.stage_name == 'update')) {
                            draw = true;
                        }
                    }
                    if (draw) {
                        this.drawStateInfo(data.state, (data.current_state.stage_status == 'error') ? 'no' : 'yes');
                        $.tmpl('application-update-result', {
                            current_state: data.current_state,
                            result: null
                        }).appendTo('#update-raw');
                    } else if (state_is_actual && data.state && (data.current_state.stage_status != 'none')) {
                        this.drawStateInfo(data.state);

                        this.timeout.state = setTimeout(function () {
                            if (!self.complete) {
                                self.execute('state', null);
                            }
                        }, this.options.updateStateInterval);
                    } else {
                        this.timeout.state = setTimeout(function () {
                            if (!self.complete) {
                                self.execute('state', null);
                            }
                        }, this.options.updateStateErrorInterval);
                    }
                }
            } catch (e) {
                this.timeout.state = setTimeout(function () {
                    if (!self.complete) {
                        self.execute('state', null);
                    }
                }, this.options.updateStateErrorInterval);
                console.error('updateStateHandler error: ' + e.message, e);
            }
        },

        updateStateErrorHandler: function (data) {
            this.trace('StateErrorHandler', data);
            if (this.timeout.state) {
                clearTimeout(this.timeout.state);
            }
            var self = this;
            this.timeout.state = setTimeout(function () {
                if (!self.complete) {
                    self.execute('state', null);
                }
            }, this.options.updateStateErrorInterval);
        },

        drawStateInfo: function (state, state_class) {
            /**
             * @todo check timestamp
             */
            var target = '#template-placeholder';
            var id, html;
            state_class = state_class || 'loading';
            switch (this.options.logMode) {
                case 'raw' :
                    if (state && state.length) {
                        for (id in state) {
                            if (state.hasOwnProperty(id) && !state[id]['datetime']) {
                                state[id]['datetime'] = new Date(parseInt(state[id]['stage_start_time']) * 1000);
                            }
                        }
                        html = $(target).html();
                        try {
                            $(target).empty();
                            $.tmpl('application-update-raw', {
                                stages: state,
                                apps: this.options.queue,
                                state_class: state_class
                            }).appendTo(target);
                        } catch (e) {
                            console.error('Error while parse template ', e);
                            $(target).html(html);
                        }
                    }
                    break;
                /*case 'apps' :*/
                default :
                    html = $(target).html();
                    try {
                        $(target).empty();
                        for (var app_id in state) {
                            if (state.hasOwnProperty(app_id)) {
                                for (id in state[app_id]) {
                                    if (state[app_id].hasOwnProperty(id) && !state[app_id][id]['datetime']) {
                                        state[app_id][id]['datetime'] = new Date(parseInt(state[app_id][id]['stage_start_time']) * 1000);
                                    }
                                }
                                var d = new Date(parseInt(state[app_id][1]['stage_start_time']) * 1000);
                                $.tmpl('application-update-apps', {
                                    slug: app_id,
                                    timestamp: d,
                                    stages: state[app_id],
                                    state_class: state_class
                                }).appendTo(target);
                            }
                        }
                    } catch (e) {
                        console.error('Error while parse template ', e);
                        $(target).html(html);
                    }
                    break;
            }

            setTimeout(function () {
                var targetOffset = $('div.i-app-update-screen :last').offset().top;
                $('div.i-app-update-screen').scrollTop(targetOffset);
            }, 100);
        },

        redirectOnComplete: function () {
            /* @todo verify that there no fails */
            if (this.options.redirect_url) {
                var self = this;
                setTimeout(function () {
                    window.location = self.options.redirect_url;
                }, this.options.redirect_timeout);
            }
        },

        animateOnInstall: function () {
            var $app_menu = $('#wa-applist ul');
            $('#update-result-apps li').each(function () {
                var $this = $(this);
                $this.parent().show();
                var position = $this.offset();

                var target = null;
                var insert_last = true;
                var $item_edition = $app_menu.find('> li[id^=' + $this.attr('id') + ']');
                if ($item_edition.length) {
                    target = $item_edition.offset();
                } else {
                    if (insert_last) {
                        target = $app_menu.find('#wa-moreapps').offset();
                        if (!target.left) {
                            target = $app_menu.find('> li[id^=wa-app-]:last').offset();
                            target.left = target.left + 75;
                        }
                    } else {
                        target = $app_menu.find('> li[id^=wa-app-]:first').offset();
                    }
                }
                var animate_params = {
                    left: target.left,
                    top: target.top
                    /*
                     * , 'width':$(this).find('img').width()+'px', 'height':$(this).find('img').height()+'px'
                     */

                };
                var css_params = {
                    top: position.top,
                    left: position.left,
                    position: 'absolute',
                    display: 'inline-block'/*
                     * 'width':'0px', 'height':'0px', 'overflow':'hidden', 'color':'transparent'
                     */
                };
                var css_params_complete = {
                    top: 0,
                    left: 0,
                    position: 'relative',
                    display: 'inline-block'/*
                     * , 'width':$(this).width()+'px', 'height':$(this).height()+'px' 'color':$(this).css('color')
                     */
                };

                $this.css(css_params);
                /* $(this).find('a').css('color','transparent'); */
                var $element = $this;
                $this.animate(animate_params, 700, function () {

                    $element.css(css_params_complete);
                    /* element.find('a').css('color',null); */
                    if ($item_edition.length) {
                        $item_edition.replaceWith($element);
                    } else {
                        if (insert_last) {
                            $element.appendTo($app_menu);
                        } else {
                            $element.prependTo($app_menu);
                            /* .effect('highlight',{},10000); */
                        }
                    }
                    $(window).resize();
                });
            });
        },

        /**
         *
         * @param {string} stage
         * @param {*=} data
         */
        trace: function (stage, data) {
            /*
             * TODO
             */
        },

        sendRequest: function (url, request_data, success_handler, error_handler, before_send_handler) {
            var self = this;
            var timestamp = new Date();
            $.ajax({
                url: url + '&timestamp=' + timestamp.getTime(),
                data: request_data,
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus) {
                    try {
                        try {
                            if (typeof(data) != 'object') {
                                data = $.parseJSON(data);
                            }
                        } catch (e) {
                            console.error('Invalid server JSON response', e);
                            if (typeof(error_handler) == 'function') {
                                error_handler();
                            }
                            throw e;
                        }
                        if (data) {
                            switch (data.status) {
                                case 'fail' :
                                    self.displayMessage(data.errors.error || data.errors, 'error');
                                    if (typeof(error_handler) == 'function') {
                                        error_handler(data);
                                    }
                                    break;
                                case 'ok' :
                                    if (typeof(success_handler) == 'function') {
                                        success_handler(data.data);
                                    }
                                    break;
                                default :
                                    console.error('unknown status response', data.status);
                                    if (typeof(error_handler) == 'function') {
                                        error_handler(data);
                                    }
                                    break;
                            }
                        } else {
                            console.error('empty response', textStatus);
                            if (typeof(error_handler) == 'function') {
                                error_handler();
                            }
                            self.displayMessage('Empty server response', 'warning');
                        }
                    } catch (e) {
                        console.error('Error handling server response ', e);
                        if (typeof(error_handler) == 'function') {
                            error_handler(data);
                        }
                        self.displayMessage('Invalid server response' + '<br>' + e.description, 'error');
                    }

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.error('AJAX request error', [textStatus, errorThrown]);
                    if (typeof(error_handler) == 'function') {
                        error_handler();
                    }
                    self.displayMessage('AJAX request error', 'warning');
                },
                beforeSend: before_send_handler
            });
        },
        displayMessage: function (message, type) {

        }
    }
})(jQuery);
;
